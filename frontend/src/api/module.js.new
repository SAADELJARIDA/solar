/**
 * Service API pour la gestion des modules photovoltaïques
 * 
 * Ce fichier gère toutes les requêtes CRUD (Create, Read, Update, Delete)
 * liées aux modules photovoltaïques du projet SolarPredict.
 */

import api from './apiConfig';

/**
 * Récupération de tous les modules photovoltaïques
 * 
 * Cette fonction fait appel à l'API pour obtenir tous les modules
 * disponibles dans le système.
 * 
 * @returns {Promise<Object>} - Liste des modules avec leurs caractéristiques
 */
export const getModules = async () => {
  try {
    const response = await api.get('/modules');
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Récupération d'un module photovoltaïque spécifique
 * 
 * Obtient les détails complets d'un module selon son identifiant.
 * 
 * @param {string} moduleId - Identifiant unique du module à récupérer
 * @returns {Promise<Object>} - Objet contenant tous les détails du module
 */
export const getModule = async (moduleId) => {
  try {
    const response = await api.get(`/modules/${moduleId}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Création d'un nouveau module photovoltaïque
 * 
 * Enregistre un nouveau module dans la base de données avec ses caractéristiques.
 * Le module est automatiquement associé à l'utilisateur actuel par le backend.
 * 
 * @param {Object} moduleData - Données du module à créer (nom, isc, voc, imp, vmp, ff)
 * @returns {Promise<Object>} - Objet du module créé avec son ID généré
 */
export const createModule = async (moduleData) => {
  try {
    const response = await api.post('/modules', moduleData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Mise à jour d'un module photovoltaïque existant
 * 
 * Modifie les caractéristiques d'un module existant.
 * Seul le propriétaire du module peut effectuer cette opération.
 * 
 * @param {string} moduleId - Identifiant du module à modifier
 * @param {Object} moduleData - Nouvelles données du module
 * @returns {Promise<Object>} - Module mis à jour
 */
export const updateModule = async (moduleId, moduleData) => {
  try {
    const response = await api.put(`/modules/${moduleId}`, moduleData);
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Suppression d'un module photovoltaïque
 * 
 * Supprime définitivement un module de la base de données.
 * Seul le propriétaire du module peut effectuer cette opération.
 * 
 * @param {string} moduleId - Identifiant du module à supprimer
 * @returns {Promise<Object>} - Confirmation de suppression
 */
export const deleteModule = async (moduleId) => {
  try {
    const response = await api.delete(`/modules/${moduleId}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

export default {
  getModules,
  getModule,
  createModule,
  updateModule,
  deleteModule
};
